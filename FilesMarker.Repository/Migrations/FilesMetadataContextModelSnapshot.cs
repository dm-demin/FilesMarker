// <auto-generated />
using System;
using FilesMarker.Repository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FilesMarker.Repository.Migrations
{
    [DbContext(typeof(FilesMetadataContext))]
    partial class FilesMetadataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FilesMarker.Repository.Models.FileMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.HasKey("Id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("FilesMarker.Repository.Models.HashTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("HierarchyId")
                        .HasColumnType("uuid")
                        .HasColumnName("hierarchy_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyId");

                    b.ToTable("hashtags", (string)null);
                });

            modelBuilder.Entity("FilesMarker.Repository.Models.HashTagsHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("hashtags_hierarchies", (string)null);
                });

            modelBuilder.Entity("files_hashtags", b =>
                {
                    b.Property<Guid>("file_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hashtag_id")
                        .HasColumnType("uuid");

                    b.HasKey("file_id", "hashtag_id");

                    b.HasIndex("hashtag_id");

                    b.ToTable("files_hashtags");
                });

            modelBuilder.Entity("FilesMarker.Repository.Models.HashTag", b =>
                {
                    b.HasOne("FilesMarker.Repository.Models.HashTagsHierarchy", "Hierarchy")
                        .WithMany("HashTags")
                        .HasForeignKey("HierarchyId");

                    b.Navigation("Hierarchy");
                });

            modelBuilder.Entity("files_hashtags", b =>
                {
                    b.HasOne("FilesMarker.Repository.Models.FileMetadata", null)
                        .WithMany()
                        .HasForeignKey("file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilesMarker.Repository.Models.HashTag", null)
                        .WithMany()
                        .HasForeignKey("hashtag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilesMarker.Repository.Models.HashTagsHierarchy", b =>
                {
                    b.Navigation("HashTags");
                });
#pragma warning restore 612, 618
        }
    }
}
